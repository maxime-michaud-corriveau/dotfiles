[credential]
	helper = manager

[merge]
	ff=only
	branchDesc=true
	log=true
[help]
	autoCorrect = 2

[alias]
	cherry-pick-with-less-stupid-conflicts = cherry-pick --strategy-option diff-algorithm=patience --strategy-option ignore-all-space
	merge-with-less-stupid-conflicts = merge --strategy-option diff-algorithm=patience --strategy-option ignore-all-space
	rebase-with-less-stupid-conflicts = rebase --strategy-option diff-algorithm=patience --strategy-option ignore-all-space
	force-push = push --force-with-lease
	ignore = "!git update-index --assume-unchanged $*"
	unignore = "!git update-index --no-assume-unchanged $*"

	#Common typoes
	dif = diff
	git = "!git "
	got = "!git "
	gut = "!git "

	reset-csproj = "!git status --porcelain | awk '{$1=$1};1' | cut -f 2 -d \" \" | grep .*csproj | xargs git checkout HEAD"
	amend-content-only = commit --amend -C HEAD
	yolo = "!git amend-content-only --all"
	es-tu-vraiment-sur-de-ce-que-tu-fais = "!git amend-content-only && git force-push"
	checkout- = checkout -
	conf = "!vim ~/.gitconfig"
	safe-clean = "!if (git status --porcelain | grep ^??); then echo unsafe git clean, aborting; else git clean -fdx; fi"
	checkout-deleted-files = "!git status --porcelain | grep ^D | cut -f 3 -d ' ' | xargs git checkout HEAD"
	wip = "!f() { \
			if [[ $1 == 'pop' ]]; then \
				git wip-pop; \
			else \
				echo iWIP mmc ${*}ZZ | git commit -a; \
			fi \
		}; f"
	wip-pop = "!git show -q | awk '{$1=$1};1' | grep '^WIP mmc' && git reset --mixed HEAD~ || echo No wip on current branch"
	pull-from = "!git pull --rebase=interactive --strategy-option diff-algorithm=patience --strategy-option ignore-all-space --autostash origin"
	pull-from-master = "!git pull-from master"
	pfm = "!git pull-from-master"
	pf = "!git pull-from"
	stash-use = "!git stash push -m \"$*\" && git stash apply && echo Applied stash: "
	apply-stash = "!git stash list | grep $1 | cut -f 1 -d : | git stash apply && echo Applied stash: "
	amend = "!git commit --amend"
	clean-merged-branches = "!f() { git branch --merged ${1-master} | grep -v " ${1-master}$" | xargs -r git branch -d; }; f"

	use-dev-vhosts = "!sed -b -i 's/core.mamcorriveau/core.dev/g' **/appsettings.* .config/appsettings.*"
	use-own-vhosts = "!sed -b -i 's/core.dev/core.mamcorriveau/g' **/appsettings.* .config/appsettings.*"
	pr = "!f() { C:/'Program Files (x86)'/Google/Chrome/Application/chrome.exe https://dev.azure.com/SWEngineering/Cumulus/_git/$( git get-repository-name )/pullrequestcreate?targetRef=master$( echo '&' )sourceRef=$( git get-branch-name ); }; f"
	get-repository-name = "!basename `git rev-parse --show-toplevel`"
	get-branch-name = "!git rev-parse --abbrev-ref HEAD"
	new-branch = "!f() { git push --set-upstream origin $( git get-branch-name ); }; f"
	new-branch-pr = "!git new-branch && git pr"
	task = "!f() { C:/'Program Files (x86)'/Google/Chrome/Application/chrome.exe https://dev.azure.com/SWEngineering/Sherweb/_workitems/edit/$1; }; f"
	current-task = "!git get-branch-name | cut -d '/' -f 2 | xargs git task"
	fix-commit = "!git commit --amend && git push -f"
	compare-commits = "!f() {  C:/'Program Files (x86)'/Google/Chrome/Application/chrome.exe https://dev.azure.com/SWEngineering/Cumulus/_git/$( git get-repository-name )/branches?baseVersion=GC${1}$( echo '&' )targetVersion=GC${2}&_a=files; }; f"
[core]
	ignorecase = false
	autocrlf = false
[rerere]
	enabled = 1
[user]
	name = Maxime Michaud-Corriveau
	email = mamcorriveau@sherweb.com
